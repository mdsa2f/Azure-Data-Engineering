{
	"name": "transform_validate_dimensions",
	"properties": {
		"folder": {
			"name": "src/transformation"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "bb74d5dc-60b5-4bfd-a52b-e4b74daec664"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/170ebf0f-ad28-434f-a1f5-be6796cc53f4/resourceGroups/rgazdatengtfg/providers/Microsoft.Synapse/workspaces/synwazdatengtfg/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://synwazdatengtfg.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import requests\n",
					"from bs4 import BeautifulSoup\n",
					"from io import StringIO\n",
					"\n",
					"\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, FloatType, BooleanType, DoubleType\n",
					"from pyspark.sql.functions import to_date, col, regexp_replace"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"storage_account_name = \"stazdatengtfg\"\n",
					"container_name = \"data\"\n",
					"folder_path_origin = \"raw\"\n",
					"folder_path_target = \"cleaned\"\n",
					"file_format = \"parquet\""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"# Get or create Spark session\n",
					"spark = SparkSession.builder.getOrCreate()  "
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"# 1. Read Dataframe from Raw\n",
					"abfs_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{folder_path_origin}\""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"df_sensors = spark.read.format(\"parquet\").load(abfs_path + \"/captadores\")\n",
					"df_pollen_types = spark.read.format(\"parquet\").load(abfs_path + \"/descripciones_polen\")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"df_sensors.printSchema()\n",
					"df_sensors.show(5)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_pollen_types.printSchema()\n",
					"df_pollen_types.show(27)"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"# 2. Apply Transformations and Validations"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"def validate_data(df):\n",
					"    \"\"\"\n",
					"    This function is used to apply the WAP pattern (Write-Audit-Publish)\n",
					"    \"\"\"\n",
					"\n",
					"    # Count rows before cleaning\n",
					"    row_count_before = df.count()\n",
					"    print(f\"Number of rows before cleaning: {row_count_before}\")\n",
					"\n",
					"    # Remove NULL values from all columns\n",
					"    df_cleaned = df.dropna(how=\"any\")  # Removes rows where any column has NULL values\n",
					"\n",
					"    # Remove duplicates based on all columns\n",
					"    df_cleaned = df_cleaned.dropDuplicates()\n",
					"\n",
					"    # Count rows after cleaning\n",
					"    row_count_after = df_cleaned.count()\n",
					"    print(f\"Number of rows after cleaning: {row_count_after}\")\n",
					"\n",
					"    return df_cleaned\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"df_sensors_cleaned = validate_data(df_sensors)\n",
					"df_pollen_types_cleaned = validate_data(df_pollen_types)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"# Rename a column\n",
					"df_sensors_cleaned = df_sensors_cleaned.withColumnRenamed(\"direccion_localidad \", \"direccion_localidad\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"df_sensors_cleaned = df_sensors_cleaned.withColumn(\"altura_del_captador\", regexp_replace(\"altura_del_captador\", \",\", \".\")) \\\n",
					"                                        .withColumn(\"altitud\", regexp_replace(\"altitud\", \",\", \".\")) \\\n",
					"                                        .withColumn(\"x_epsg25830\", regexp_replace(\"x_epsg25830\", \",\", \".\")) \\\n",
					"                                        .withColumn(\"y_epsg25830\", regexp_replace(\"y_epsg25830\", \",\", \".\")) \\\n",
					"                                        .withColumn(\"lat_epsg4258\", regexp_replace(\"lat_epsg4258\", \",\", \".\")) \\\n",
					"                                        .withColumn(\"long_epsg4258\", regexp_replace(\"long_epsg4258\", \",\", \".\"))\n",
					"                            "
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"source": [
					"# Cast Data Types to avoid Loading Errors \n",
					"\n",
					"df_sensors_cleaned = df_sensors_cleaned.withColumn(\"direccion_codigo_postal\", col(\"direccion_codigo_postal\").cast(IntegerType())) \\\n",
					"                                        .withColumn(\"zbs_geocodigo\", col(\"zbs_geocodigo\").cast(IntegerType())) \\\n",
					"                                        .withColumn(\"numero_tipos_de_polen_registrados\", col(\"numero_tipos_de_polen_registrados\").cast(IntegerType())) \\\n",
					"                                        .withColumn(\"altura_del_captador\", col(\"altura_del_captador\").cast(DoubleType())) \\\n",
					"                                        .withColumn(\"altitud\", col(\"altitud\").cast(DoubleType())) \\\n",
					"                                        .withColumn(\"x_epsg25830\", col(\"x_epsg25830\").cast(DoubleType())) \\\n",
					"                                        .withColumn(\"y_epsg25830\", col(\"y_epsg25830\").cast(DoubleType())) \\\n",
					"                                        .withColumn(\"lat_epsg4258\", col(\"lat_epsg4258\").cast(DoubleType())) \\\n",
					"                                        .withColumn(\"long_epsg4258\", col(\"long_epsg4258\").cast(DoubleType())) \\\n",
					"                                        .withColumn(\"red_esp_aerobiologia\", col(\"red_esp_aerobiologia\").cast(BooleanType())) \\\n",
					"                                        .withColumn(\"fecha_inicio_mediciones\", col(\"fecha_inicio_mediciones\").cast(StringType()))\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"source": [
					"# Handle Datetimes\n",
					"df_sensors_cleaned = df_sensors_cleaned.withColumn(\"fecha_inicio_mediciones\", \n",
					"                                        to_date(df_sensors_cleaned[\"fecha_inicio_mediciones\"]))"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"source": [
					"# Truncate Text Data\n",
					"df_sensors_cleaned = df_sensors_cleaned.withColumn(\"tipos_de_polen_registrados\", col(\"tipos_de_polen_registrados\").substr(1, 255))\n",
					"df_pollen_types_cleaned = df_pollen_types_cleaned.withColumn(\"Description\", col(\"Description\").substr(1, 255))"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					"# 3. Write to Cleaned Folder"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"# Build the ADLS Path (ABFS format for direct writing)\n",
					"adls_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{folder_path_target}/\""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"source": [
					"# Write DataFrame to ADLS in Parquet format\n",
					"df_sensors_cleaned.write.format(file_format).mode(\"overwrite\").option(\"header\", \"true\").save(adls_path + \"/captadores\")\n",
					"df_pollen_types_cleaned.write.format(file_format).mode(\"overwrite\").option(\"header\", \"true\").save(adls_path + \"/descripciones_polen\")\n",
					"\n",
					"print(f\"Data successfully written to {adls_path}\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"source": [
					"# Stop the Spark session\n",
					"spark.stop()"
				],
				"execution_count": 46
			}
		]
	}
}